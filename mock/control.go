// Code generated by MockGen. DO NOT EDIT.
// Source: monkey/inter (interfaces: MonkeyController)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	domain "monkey/domain"
	reflect "reflect"
)

// MockMonkeyController is a mock of MonkeyController interface
type MockMonkeyController struct {
	ctrl     *gomock.Controller
	recorder *MockMonkeyControllerMockRecorder
}

// MockMonkeyControllerMockRecorder is the mock recorder for MockMonkeyController
type MockMonkeyControllerMockRecorder struct {
	mock *MockMonkeyController
}

// NewMockMonkeyController creates a new mock instance
func NewMockMonkeyController(ctrl *gomock.Controller) *MockMonkeyController {
	mock := &MockMonkeyController{ctrl: ctrl}
	mock.recorder = &MockMonkeyControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonkeyController) EXPECT() *MockMonkeyControllerMockRecorder {
	return m.recorder
}

// ListMonkeys mocks base method
func (m *MockMonkeyController) ListMonkeys() ([]*domain.Monkey, error) {
	ret := m.ctrl.Call(m, "ListMonkeys")
	ret0, _ := ret[0].([]*domain.Monkey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonkeys indicates an expected call of ListMonkeys
func (mr *MockMonkeyControllerMockRecorder) ListMonkeys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonkeys", reflect.TypeOf((*MockMonkeyController)(nil).ListMonkeys))
}

// RetrieveMonkey mocks base method
func (m *MockMonkeyController) RetrieveMonkey(arg0 string) (*domain.Monkey, error) {
	ret := m.ctrl.Call(m, "RetrieveMonkey", arg0)
	ret0, _ := ret[0].(*domain.Monkey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveMonkey indicates an expected call of RetrieveMonkey
func (mr *MockMonkeyControllerMockRecorder) RetrieveMonkey(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveMonkey", reflect.TypeOf((*MockMonkeyController)(nil).RetrieveMonkey), arg0)
}
